I"_l<p><img src="/assets/img/play.png" alt="Play" /></p>

<p>Boxfuse supports <strong>Play 2.3.x or newer</strong> apps packaged as a <strong>Play dist zip</strong> using either <strong>OpenJDK 7.x or 8.x</strong>.</p>

<h2 id="get-started">Get Started</h2>

<p>If you haven’t already, start by following <strong><a href="/getstarted/play">Play &amp; Boxfuse tutorial</a></strong> that will get you <strong>up and running in 5-10 minutes</strong>.</p>

<h2 id="java-runtime-environment">Java Runtime Environment</h2>

<p>By default Boxfuse uses the <strong>latest OpenJDK 8.x version</strong> (headless JRE).</p>

<h3 id="openjdk-version">OpenJDK version</h3>

<p>If you want to switch to OpenJDK 7.x or simply an older version, you can do so using the <code class="language-plaintext highlighter-rouge">-components.openjdk</code> configuration setting:</p>

<pre class="console"><span>&gt;</span> boxfuse run my-app-1.0.jar <strong>-components.openjdk=</strong>7.80.32</pre>

<p>To find out which OpenJDK versions are available from the Boxfuse Inventory you can simply issue:</p>

<pre class="console"><span>&gt;</span> boxfuse inventory openjdk</pre>

<h3 id="custom-jre">Custom JRE</h3>

<p>If you prefer to use a different JRE, such as the <strong>Oracle JRE</strong>, rather than the default OpenJDK one,
you can do so by including the <strong>Linux x64</strong> JRE distribution of your choice in a <code class="language-plaintext highlighter-rouge">/jre</code> folder <em>inside</em> the Play dist zip file.</p>

<p>This <code class="language-plaintext highlighter-rouge">/jre</code> folder should be put into the <code class="language-plaintext highlighter-rouge">conf</code> directory of your project:</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-folder-open"></i> jre
  <i class="fa fa-folder-open"></i> bin
    <i class="fa fa-file"></i> java
    <i class="fa fa-file"></i> ...
  <i class="fa fa-folder-open"></i> lib
    <i class="fa fa-folder"></i> amd64
    <i class="fa fa-folder"></i> ...
    <i class="fa fa-file"></i> rt.jar
    <i class="fa fa-file"></i> ...
  <i class="fa fa-file-text"></i> COPYRIGHT
  <i class="fa fa-file-text"></i> LICENSE
  <i class="fa fa-file"></i> ...</span></pre>

<div class="alert alert-info"><p><strong>Tip for Git users</strong></p>
    <p>To avoid file corruption due to Git line-ending normalization, add the following line to `.gitattributes`</p>
    <pre class="prettyprint" style="margin-bottom: 0">conf/jre/* binary</pre>
</div>

<h2 id="configuration">Configuration</h2>

<p>By default Boxfuse looks for an <code class="language-plaintext highlighter-rouge">application.conf</code> file <em>inside</em> the Play dist zip file.
You can find this file in the <code class="language-plaintext highlighter-rouge">/conf</code> directory of your project:</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file-text"></i> application.conf</span></pre>

<p>Boxfuse parses <strong><code class="language-plaintext highlighter-rouge">application.conf</code></strong> and <strong>automatically configures the http &amp; https ports, the payload path and the healthcheck path</strong> based on the
following config parameters: <code class="language-plaintext highlighter-rouge">play.server.http.port</code>, <code class="language-plaintext highlighter-rouge">play.server.https.port</code> and <code class="language-plaintext highlighter-rouge">play.http.context</code>.</p>

<p>When both <code class="language-plaintext highlighter-rouge">play.server.http.port</code> and <code class="language-plaintext highlighter-rouge">play.server.https.port</code> are set, the https port takes precedence for the healthcheck.
You can override this by explicitly passing the Boxfuse parameter <code class="language-plaintext highlighter-rouge">-healthcheck.port=http</code> when fusing the image.</p>

<h3 id="application-secret">Application secret</h3>

<p>As Boxfuse runs your application in <em>production mode</em> you must set your <em>application secret</em> either in <code class="language-plaintext highlighter-rouge">application.conf</code>
or pass it from the command-line. For example:</p>

<table class="table table-striped">
  <thead>
    <tr>
      <th>Play Version</th>
      <th>Play Setting</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2.6</td>
      <td><code class="language-plaintext prettyprint highlighter-rouge">play.http.secret.key="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241ABR5W:1uDFN];Ik@n"</code></td>
    </tr>
    <tr>
      <td>2.5</td>
      <td><code class="language-plaintext prettyprint highlighter-rouge">play.crypto.secret="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241ABR5W:1uDFN];Ik@n"</code></td>
    </tr>
    <tr>
      <td>2.4</td>
      <td><code class="language-plaintext prettyprint highlighter-rouge">play.crypto.secret="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241ABR5W:1uDFN];Ik@n"</code></td>
    </tr>
    <tr>
      <td>2.3</td>
      <td><code class="language-plaintext prettyprint highlighter-rouge">application.secret="QCY?tAnfk?aZ?iwrNwnxIlR6CTf:G3gf:90Latabg@5241ABR5W:1uDFN];Ik@n"</code></td>
    </tr>
  </tbody>
</table>

<p>More info in the <a href="https://playframework.com/documentation/2.6.x/ApplicationSecret">official Play documentation</a>.</p>

<h3 id="allowed-hosts-filter">Allowed hosts filter</h3>

<p>If your application uses the allowed hosts filter you must ensure <code class="language-plaintext highlighter-rouge">play.filters.hosts.allowed</code> in
<code class="language-plaintext highlighter-rouge">application.conf</code> allows connections from anywhere as this filter otherwise causes ELB healthchecks to fail. For example:</p>

<pre class="prettyprint">play.filters.hosts {
  allowed = ["."]
}</pre>

<p>More info in the <a href="https://www.playframework.com/documentation/2.6.x/AllowedHostsFilter">official Play documentation</a>.</p>

<h3 id="alternative-play-config-files">Alternative Play config files</h3>

<p>By default, Play loads the <code class="language-plaintext highlighter-rouge">application.conf</code> file in the <code class="language-plaintext highlighter-rouge">conf</code> directory of your app.
You can however tell play to use alternative config files by passing in a JVM system property. So for:</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <i class="fa fa-file-text"></i> application.conf
    <span><i class="fa fa-file-text"></i> other.conf</span></pre>

<p>You could then launch your Boxfuse instance with <code class="language-plaintext highlighter-rouge">-jvm.args=-Dconfig.file=other.conf</code> to load the
alternate Play config file called <code class="language-plaintext highlighter-rouge">other.conf</code> in the conf directory of your application.</p>

<p><strong>Note:</strong> these files must be present at the time you build the dist zip using <code class="language-plaintext highlighter-rouge">sbt dist</code>.
Also keep in mind that <a href="#configuration">Boxfuse auto-configuration</a> only works with the regular <code class="language-plaintext highlighter-rouge">application.conf</code> file.</p>

<h2 id="overriding-play-configuration">Overriding Play configuration</h2>

<p>As an alternative to overriding the entire configure you can also selectively override individual configuration properties
on instance launch.</p>

<h3 id="using-jvm-system-properties">Using JVM system properties</h3>

<p>The first option is to use JVM system properties. For example: <code class="language-plaintext highlighter-rouge">-jvm.args=-Dplay.http.secret.key=abcdefghijk</code></p>

<p>More info in the <a href="https://www.playframework.com/documentation/2.6.x/ProductionConfiguration#Overriding-configuration-with-system-properties">official Play documentation</a>.</p>

<h3 id="using-environment-variables">Using environment variables</h3>

<p>Play also gives you the opportunity to override configuration properties using environment variables. Say if you have
defined <code class="language-plaintext highlighter-rouge">my.key = ${?MY_KEY_ENV}</code> in your Play configuration file, you can now override it on instance launch
using <code class="language-plaintext highlighter-rouge">-envvars.MY_KEY_ENV=myvalue</code>.</p>

<p>More info in the <a href="https://www.playframework.com/documentation/2.6.x/ProductionConfiguration#Using-environment-variables">official Play documentation</a>.</p>

<h2 id="databases">Databases</h2>

<h3 id="database-auto-provisioning">Database auto-provisioning</h3>

<p>If your app includes the PostgreSQL or MySQL JDBC driver, Boxfuse will automatically activate
<a href="/docs/databases">database auto-provisioning support</a> and provision the necessary PostgreSQL or MySQL database
in each environment as well as auto-configure Play’s DataSource. Alternatively you can also explicitly configure database auto-provisioning by passing in
the correct <code class="language-plaintext highlighter-rouge">db.type</code> value when <a href="/docs/commandline/create#db.type">creating your Boxfuse app</a>.</p>

<p>When using database auto-provisioning, Boxfuse automatically configures Play’s DataSource
to use the correct driver class name, jdbc url, user and password. It does so by automatically supplying the
<code class="language-plaintext highlighter-rouge">db.default.driver</code>, <code class="language-plaintext highlighter-rouge">db.default.url</code>, <code class="language-plaintext highlighter-rouge">db.default.username</code> and <code class="language-plaintext highlighter-rouge">db.default.password</code> with the
correct value for the current environment to the JVM.</p>

<h3 id="slick">Slick</h3>

<p>For Play 2.4 and newer apps that include the PostgreSQL or MySQL JDBC driver and use Slick instead of the regular Play database access, Boxfuse also automatically configures
Slick’s driver, the jdbc driver class name, jdbc url, user and password. This can be disabled by setting
<code class="language-plaintext highlighter-rouge">db.type</code> to <code class="language-plaintext highlighter-rouge">none</code> when <a href="/docs/commandline/create#db.type">creating your Boxfuse app</a>.</p>

<p>You can also override these auto-configured values by explicitly passing them as <a href="/docs/commandline/fuse#jvm.args">JVM arguments</a>. For example, to
override the Slick driver you can do so like this:</p>

<pre class="console"><span>&gt;</span> boxfuse fuse my-play-app-1.0.zip <strong>-jvm.args=-Dslick.dbs.default.driver=my.custom.SlickDriver</strong></pre>

<h3 id="using-an-existing-database">Using an existing database</h3>

<p>To disable database auto-provisioning and use an existing database set <code class="language-plaintext highlighter-rouge">db.type</code> to <code class="language-plaintext highlighter-rouge">none</code> when <a href="/docs/commandline/create#db.type">creating your Boxfuse app</a>.</p>

<h3 id="evolutions">Evolutions</h3>

<p>If you choose to use Play Evolutions to migrate your database schema (as opposed to <a href="https://flywaydb.org">Flyway</a>) you have to ensure evolutions
are applied automatically to prevent application startup issues.</p>

<p>For Play 2.3.x, set <code class="language-plaintext highlighter-rouge">applyEvolutions.</code><em>database</em><code class="language-plaintext highlighter-rouge">=true</code> in your Play config (<a href="https://www.playframework.com/documentation/2.3.x/Evolutions#Running-Evolutions-in-Production">reference docs</a>).</p>

<p>For Play 2.4.x and newer, set <code class="language-plaintext highlighter-rouge">play.evolutions.autoApply=true</code> in your Play config (<a href="https://www.playframework.com/documentation/2.4.x/Evolutions#Evolutions-configuration&quot;&gt;reference docs">reference docs</a>).</p>

<h2 id="tls-ssl-certificates--https">TLS (SSL) Certificates / HTTPS</h2>

<h3 id="automatic-tls-ssl-certificate-management">Automatic TLS (SSL) Certificate management</h3>

<p>To expose your app via <strong>HTTPS</strong> make sure you have a <a href="/docs/domains">custom domain</a> configured
for the <a href="/docs/environments">environment</a> where you want to run it. Also make sure that you have obtained
a <a href="/docs/tls">valid TLS (SSL) certificate</a> and that your <a href="/docs/commandline/create">app has been created</a>
with <code class="language-plaintext highlighter-rouge">app.type</code> set to <code class="language-plaintext highlighter-rouge">load-balanced</code> and <code class="language-plaintext highlighter-rouge">tls.type</code> set to <code class="language-plaintext highlighter-rouge">acm</code> (AWS Certificate Manager).</p>

<p>With that in place your Play app will be automatically configured to run with HTTPS and a green lock will appear in the browser.</p>

<p>You can also manually force the correct configuration by adding these properties to your Play config file:</p>

<pre class="prettyprint">play.server.https.port=443</pre>

<p>Boxfuse will automatically ensure that all network traffic between the load balancer and your instances will be encrypted as well.</p>

<h3 id="manual-tls-ssl-certificate-management">Manual TLS (SSL) Certificate management</h3>

<p>To use HTTPS with your own certificate, you first have to obtain a valid certificate from a Certificate Authority and
add a KeyStore containing your SSL certificate inside the zip file at <code class="language-plaintext highlighter-rouge">/conf/boxfuse.jks</code>.
If you use SBT or Typesafe Activator, this means your <code class="language-plaintext highlighter-rouge">boxfuse.jks</code> keystore file should be put into the <code class="language-plaintext highlighter-rouge">conf</code> directory.</p>

<p>Both the keystore itself as well as the certificate should be secured with the password <code class="language-plaintext highlighter-rouge">boxfuse</code>.</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file"></i> boxfuse.jks</span></pre>

<p>f present, Boxfuse automatically configures your Play application to use it. All you need to do is set the <code class="language-plaintext highlighter-rouge">https</code>
port to the one you want. This can be done either in your Boxfuse or in your Play config. Example:</p>

<pre class="console"><span>&gt;</span> boxfuse run <strong>-ports.https</strong>=443</pre>

<p>To use an alternative keystore called say <code class="language-plaintext highlighter-rouge">mykeystore.jks</code>, simply place it in the <code class="language-plaintext highlighter-rouge">conf</code> directory and refer to it using a relative path like <code class="language-plaintext highlighter-rouge">conf/mykeystore.jks</code>.
You can then also specify its password as usual in your <code class="language-plaintext highlighter-rouge">application.conf</code> file.</p>

<h2 id="root-certificates">Root Certificates</h2>

<p>By default, Boxfuse uses the <strong>same root certificate bundle as the latest version of Firefox</strong>.
Additionally Boxfuse also includes the <strong>root certificates for Amazon RDS</strong>, so you can connect securely to RDS databases out of the box.</p>

<p>You can, however, ship your own set of root certificates, by placing them in a KeyStore inside the Zip file as <code class="language-plaintext highlighter-rouge">/conf/cacerts</code>.
If you use SBT or Typesafe Activator, this means your <code class="language-plaintext highlighter-rouge">cacerts</code> KeyStore file should be put into the <code class="language-plaintext highlighter-rouge">conf</code> directory.
Boxfuse will then automatically configure the JRE to use these instead.</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file"></i> cacerts</span></pre>

<p>If you choose to secure your <code class="language-plaintext highlighter-rouge">cacerts</code> TrustStore with a password different than the default <code class="language-plaintext highlighter-rouge">changeit</code>,
you have to add the following to your Play configuration:</p>

<pre class="prettyprint">play.ws.ssl {
  trustManager = {
      stores = [
        { path: /cacerts/cacerts, password = "my0th3rPwd" }
      ]
  }
}</pre>

<h2 id="jce-unlimited-strength-cryptography">JCE unlimited strength cryptography</h2>

<h3 id="using-boxfuses-default-jre">Using Boxfuse’s default JRE</h3>

<p><strong>This is already enabled by default (starting with OpenJDK 8.162.12) and no further action is required.</strong></p>

<h3 id="using-an-older-boxfuse-jre">Using an older Boxfuse JRE</h3>

<p>To enable JCE unlimited cryptography (for AES-256, RSA-4096, …), download the policy zip from the Oracle website
for either <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html">Java 7</a>
or <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java 8</a>.</p>

<p>Extract both <code class="language-plaintext highlighter-rouge">local_policy.jar</code> and <code class="language-plaintext highlighter-rouge">US_export_policy.jar</code> and place them inside the Zip file under <code class="language-plaintext highlighter-rouge">/conf</code>.
If you use SBT, this means both policy jar files should be put into the <code class="language-plaintext highlighter-rouge">conf</code> directory.
Boxfuse will then automatically configure the JRE to use these instead.</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file"></i> local_policy.jar
<i class="fa fa-file"></i> US_export_policy.jar</span></pre>

<h3 id="using-a-custom-jre">Using a custom JRE</h3>

<p>If you use a <a href="#custom-jre">custom JRE</a> it is your responsibility to ensure it is configured for unlimited
strength cryptography if you need it.</p>

<h2 id="java-agents">Java Agents</h2>

<p>If you wish to launch the JRE with one or more Java Agents, simply place the Java Agent files inside the Zip file under
<code class="language-plaintext highlighter-rouge">/conf/javaagents/</code>. In a SBT or Typesafe Activator project this means you have to put your agent jar and whatever other files it requires under <code class="language-plaintext highlighter-rouge">conf/javaagents</code>:</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-folder-open"></i> javaagents
  <i class="fa fa-file"></i> myjavaagent.jar
  <i class="fa fa-file-text"></i> myjavaagent.properties</span></pre>

<p>Boxfuse will then <strong>automatically configure the JRE to use these Java Agents</strong>.</p>

<h2 id="jvm-memory">JVM Memory</h2>

<p>By default Boxfuse will <strong>dynamically configure your JVM heap to use 85% of the available memory</strong> in the instance. All other settings
use the JVM defaults. You can override this by specifying the required JVM arguments like <code class="language-plaintext highlighter-rouge">-Xmx</code> via the
<code class="language-plaintext highlighter-rouge">jvm.args</code> configuration setting.</p>

<h2 id="temporary-files">Temporary Files</h2>

<p>Boxfuse configures the JVM to use <code class="language-plaintext highlighter-rouge">/tmp</code> as the directory to store temporary files and provisions <strong>1 GB of space by default</strong>.</p>

<p>To increase this (up to a maximum of 16 TB), simply set
the <code class="language-plaintext highlighter-rouge">tmp</code> configuration setting to the number of GB of temp space you need. To prevent Boxfuse from
provisioning any temp space set <code class="language-plaintext highlighter-rouge">tmp</code> to <code class="language-plaintext highlighter-rouge">0</code>.</p>

<h2 id="debugging">Debugging</h2>

<p>Remote debugging (including hot-code replace) with your favorite IDE is fully supported.
Details and setup instructions on our <a href="/docs/debugging">debugging page</a>.</p>

<h2 id="profiling">Profiling</h2>

<p>Profiling with tools like JVisualVM and Java Flight Recorder is fully supported.
Details and setup instructions on our <a href="/docs/profiling">profiling page</a>.</p>

<h2 id="live-reloading">Live Reloading</h2>

<p>Boxfuse supports <a href="/docs/live">Live Reloading</a> of exploded Play zip files.</p>

<h2 id="time-zone">Time Zone</h2>

<p>By default all Boxfuse instance use the <strong><code class="language-plaintext highlighter-rouge">UTC</code> time zone</strong>.</p>

<p>We <strong>don’t recommend changing this</strong> as this greatly simplifies time zone issues in machine to machine communication
and cleanly relegates all time zones related aspects to a pure presentation layer concern.</p>

<p>If however you still do want to change this, you can override the default time zone of the instance using the
<code class="language-plaintext highlighter-rouge">TZ</code> environment variable. For example to change the time zone of your instance to <code class="language-plaintext highlighter-rouge">America/Los_Angeles</code>
you would do so like this:</p>

<pre class="console"><span>&gt;</span> boxfuse fuse <strong>-envvars.TZ=</strong>America/Los_Angeles</pre>

<h2 id="native-binaries-and-libs">Native binaries and libs</h2>

<p>Some JVM applications also depend on <strong>native Linux x64 binaries and libs</strong> to do their work. Boxfuse makes it easy to
integrate them into your image.</p>

<p>Simply place your binaries under <code class="language-plaintext highlighter-rouge">conf/native/bin</code> and Boxfuse
will automatically add them to the <code class="language-plaintext highlighter-rouge">PATH</code> at runtime in your instances.</p>

<p>If those binaries also depend on additional shared libraries beyond the C library, place the .so files of your libraries
under <code class="language-plaintext highlighter-rouge">conf/native/lib</code> on the classpath and Boxfuse
will automatically add them to the <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> at runtime in your instances.</p>

<div class="alert alert-info"><p><strong>Tip</strong></p>
    <p>To list all the shared libraries your Linux x64 binary requires, you can use the following command on a Linux system:</p>
    <pre class="console" style="margin-bottom: 0"><span>$</span> ldd -v my-native-binary</pre>
</div>

<p>In a SBT or Typesafe Activator project, the <code class="language-plaintext highlighter-rouge">native</code> directory should be put under the <code class="language-plaintext highlighter-rouge">conf</code>
directory. Boxfuse will then automatically configure the <code class="language-plaintext highlighter-rouge">PATH</code> and <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> to use it.</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-folder-open"></i> native
  <i class="fa fa-folder-open"></i> bin
    <i class="fa fa-file"></i> my-native-binary
    <i class="fa fa-file"></i> other-linux-x64-binary
  <i class="fa fa-folder-open"></i> lib
    <i class="fa fa-file"></i> my-shared-lib.so
    <i class="fa fa-file"></i> other-shared-lib.so</span></pre>

<p>You can then simply invoke them in your code using</p>

<pre class="prettyprint">Runtime.getRuntime().exec("my-native-binary arg1 arg2 arg3");</pre>

<h2 id="new-relic-support">New Relic support</h2>

<p>To monitor your app using <a href="/docs/newrelic">New Relic</a> simply pass in your New Relic license key when
fusing your image and Boxfuse will automatically install and configure the New Relic Servers Linux x64 and New Relic Java agents for you.</p>

<pre class="console"><span>&gt;</span> boxfuse fuse <strong>-newrelic.licensekey=</strong>0123456789abcdef0123456789abcdef01234567</pre>

<p>Alternatively you can also supply a <code class="language-plaintext highlighter-rouge">newrelic.yml</code> configuration file for the Java agent and Boxfuse will
automatically use that instead. Boxfuse will then install the agent for you, but won’t override any application name you may have configured.
If you haven’t configured a New Relic license key as described above, Boxfuse will use
the license key contained in your <code class="language-plaintext highlighter-rouge">newrelic.yml</code> configuration file instead.</p>

<p>In a SBT or Typesafe Activator project, the <code class="language-plaintext highlighter-rouge">newrelic.yml</code> file should be put into the <code class="language-plaintext highlighter-rouge">conf</code> directory.
Boxfuse will then automatically configure the New Relic Java agent to use it.</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file"></i> newrelic.yml</span></pre>

<h3 id="sending-stacktraces">Sending stacktraces</h3>

<p>To ensure New Relic is able to show stack traces for errors, you must <a href="https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java">include the New Relic API</a>
and <a href="https://www.playframework.com/documentation/2.6.x/ScalaErrorHandling#Extending-the-default-error-handler">extend Play’s default error handler</a>
so that each error gets properly reported:</p>

<pre class="prettyprint">import javax.inject._

import play.api.http.DefaultHttpErrorHandler
import play.api._
import play.api.mvc._
import play.api.mvc.Results._
import play.api.routing.Router
import scala.concurrent._

import com.newrelic.api.agent.NewRelic

@Singleton
class ErrorHandler @Inject() (
    env: Environment,
    config: Configuration,
    sourceMapper: OptionalSourceMapper,
    router: Provider[Router]
  ) extends DefaultHttpErrorHandler(env, config, sourceMapper, router) {

  override def onProdServerError(request: RequestHeader, exception: UsefulException) = {
    NewRelic.noticeError(exception)
    super.onProdServerError(request, exception)
  }
}</pre>

<h2 id="linux-kernel-tuning-experts-only">Linux Kernel Tuning (experts only)</h2>

<h3 id="kernel-arguments">Kernel arguments</h3>

<p>To tune the arguments passed Linux kernel from the bootloader, simply pass them using the
<a href="/docs/commandline/fuse#linux.args"><code class="language-plaintext highlighter-rouge">-linux.args</code></a> setting when fusing your image.</p>

<h3 id="sysctlconf">sysctl.conf</h3>

<p>If you need to tune the Linux kernel running in your instance, simply place a <code class="language-plaintext highlighter-rouge">sysctl.conf</code> file inside the Zip file under
<code class="language-plaintext highlighter-rouge">/conf</code>. In a SBT or Typesafe Activator project this means you have to put it under <code class="language-plaintext highlighter-rouge">/conf</code>:</p>

<pre class="filetree"><i class="fa fa-folder-open"></i> my-play-app
  <i class="fa fa-folder-open"></i> conf
    <span><i class="fa fa-file-text"></i> sysctl.conf</span></pre>

<p>You can then for example tune the maximum number of file descriptors by simply including the following in <code class="language-plaintext highlighter-rouge">sysctl.conf</code>:</p>

<pre class="prettyprint">fs.file-max = 131072</pre>

<p>Boxfuse will then <strong>automatically configure the Linux kernel to use these settings</strong>.</p>

<p class="next-steps"><a href="/docs/payloads/tomcat" class="btn btn-primary">Tomcat <i class="fa fa-arrow-right"></i></a></p>
:ET