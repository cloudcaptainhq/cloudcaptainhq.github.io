I":<p>Boxfuse originally launched with two types of apps: <code class="language-plaintext highlighter-rouge">single-instance</code> for applications using Elastic IP addresses
and <code class="language-plaintext highlighter-rouge">load-balanced</code> for applications using Classic Elastic Load Balancers. Over time we have added support for additional
types of applications such as <a href="/blog/worker"><code class="language-plaintext highlighter-rouge">workers apps</code></a> and <a href="/blog/one-off"><code class="language-plaintext highlighter-rouge">one-off apps</code></a> to support more diverse
types of workloads.</p>

<p>Today Boxfuse is expanding further with support for <code class="language-plaintext highlighter-rouge">load-balanced-https</code> apps using <strong>AWS Application Load Balancers</strong>,
together with Auto Scaling Groups and optionally custom domains and TLS (SSL) certificates.</p>

<p><img src="/assets/posts/load-balanced-https/load-balanced-https.png" alt="load-balanced-https" /></p>

<h2 id="how-does-it-work">How does it work?</h2>

<p>When you create a new <code class="language-plaintext highlighter-rouge">load-balanced-https</code> app using either the <a href="https://console.boxfuse.com">Boxfuse Console</a></p>

<p><img src="/assets/posts/load-balanced-https/console.png" alt="create" class="screenshot" /></p>

<p>or the <a href="/docs/commandline">Boxfuse Client</a></p>

<pre class="console"><span>&gt;</span> boxfuse create my-app <strong>-app.type=load-balanced-https</strong></pre>

<p>Boxfuse will be set up to automatically provision and configure all necessary resources when the app is deployed.</p>

<p>Just for the ALB this includes:</p>
<ul>
  <li>a new ALB (Application Load Balancer)</li>
  <li>a security group with the correct permissions for the ALB</li>
  <li>one or more listeners for the correct ports on the ALB</li>
  <li>a target group associated with the ALB</li>
  <li>rules connecting the listeners to the target group</li>
</ul>

<h2 id="why-application-load-balancers">Why Application Load Balancers?</h2>

<p>AWS Application Load Balancers come with a number of important improvements for applications serving traffic over HTTP(S)
including <strong>HTTP/2</strong> and <strong>WebSockets</strong>, while building on the important features you already love like
Auto Scaling and automatic TLS certificate management.</p>

<h2 id="seeing-it-in-action">Seeing it in action</h2>

<p>So let’s see how this works if we deploy our sample Spring Boot application on AWS:</p>

<pre class="console" style="font-size: 90%"><span>&gt;</span> boxfuse run -app.type=load-balanced-https -env=test -tls.type=acm -domain=hello.boxfuse-example.com

Creating hello ...
<strong class="success">Successfully created app hello (type: load-balanced-https, tls: acm, db: none, logs: cloudwatch-logs)</strong>
Fusing Image for hello.jar (Spring Boot) ...
Image fused in 00:03.673s (62850 K) -&gt; myuser/hello:1.0
Pushing myuser/hello:1.0 ...
Verifying myuser/hello:1.0 ...
Waiting for AWS to create an encrypted AMI for myuser/hello:1.0 in eu-central-1 (this may take up to 50 seconds) ...
AMI created in 00:47.010s in eu-central-1 -&gt; ami-75de631a
Creating security group boxsg-myuser-test-hello ...
Creating Log Stream boxfuse/test &gt; myuser/hello ...
Creating Application Load Balancer for myuser/hello in test ...
Creating Target Group myuser-test-hello ...
Found certificate for hello.boxfuse-example.com =&gt; arn:aws:acm:eu-central-1:...
Creating ALB Listener for port 80 ...
Creating security group boxsg-myuser-test-hello-1.0 ...
Creating Launch Configuration boxlc-myuser-test-hello-1.0 ...
Creating Auto Scaling Group boxasg-myuser-test-hello-1.0 ...
Waiting for Auto Scaling Group boxasg-myuser-test-hello-1.0 to launch 1 t2.micro Instance ...
Auto Scaling Group: i-063c0eab44eb5d87c [Pending]
Auto Scaling Group: i-063c0eab44eb5d87c [InService]
Waiting for ALB to become active (this may take up to 10 minutes) ...
Waiting for ALB Target Group to put instances in service ...
ALB: i-063c0eab44eb5d87c [healthy]
<strong class="success">Successfully running myuser/hello:1.0 in test at https://hello.boxfuse-example.com/</strong></pre>

<p>And our app is fully up and running, load balanced in an auto scaling group with a custom domain and an automatic TLS certificate.</p>

<p>All deploys from here on are performed with zero downtime by simply launching a new auto scaling group and switch out the old one within the target group.</p>

<h2 id="byotg-bring-your-own-target-group">BYOTG (Bring Your Own Target Group)</h2>

<p>Advanced users also have the option to configure their own ALB and Target Group. From there all that is needed is
simply pointing Boxfuse at the name of the <a href="/docs/commandline/cfg#targetgroup">desired Target Group</a> and Boxfuse will use
that one instead of the ALB and Target Group auto provisioning described above.</p>

<h2 id="available-today">Available today</h2>

<p>Support for <code class="language-plaintext highlighter-rouge">load-balanced-https</code> apps is available today at no additional charge on all paid Boxfuse plans. Enjoy!</p>

<p>So if you haven’t already,
<a href="https://console.boxfuse.com"><strong>sign up for your Boxfuse account</strong></a> now (simply log in with your GitHub id, it’s free),
start deploying your application effortlessly to AWS today and have it running in minutes.</p>
:ET